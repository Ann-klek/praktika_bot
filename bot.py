import logging
import asyncio
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
import aiohttp
from aiogram.exceptions import TelegramBadRequest
import aiosqlite
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv
import os

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")



bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)
db_path = "ege_bot_db.db"
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
IMAGES_DIR = os.path.join(BASE_DIR, "assets", "images")
FILES_DIR = os.path.join(BASE_DIR, "assets", "files")
router = Router()
class AdminStates(StatesGroup):
    waiting_for_task_text = State()
    waiting_for_image_confirm = State()
    waiting_for_image = State()
    waiting_for_file_confirm = State()
    waiting_for_file = State()
    browsing_tasks = State()
class TestStates(StatesGroup):
    testing = State()
    questions = State()
    current = State()
    answers = State()
# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
def get_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ó–∞–¥–∞—á–∞ –æ—Ç –ò–ò", callback_data="get_task")],
            [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="gift")],
            [InlineKeyboardButton(text="üìå –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞", callback_data="select_task")],
            [InlineKeyboardButton(text="üìã –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="train_variant")],
            [InlineKeyboardButton(text="üìà –ú–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã", callback_data="results")]
            # [InlineKeyboardButton(text="üõç –¢–æ–≤–∞—Ä—ã", callback_data="tovars")]
        ]
    )
    return keyboard
def get_admin_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task")],
            [InlineKeyboardButton(text="‚ùå–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="delete_task")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="go_back")]

        ]
    )
    return keyboard
def yes_no_keyboard(callback_prefix):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{callback_prefix}_yes"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=f"{callback_prefix}_no")
            ]
        ]
    )
def back_or_add_more_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="add_task")]
        ]
    )

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
def get_back_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
        ]
    )
    return keyboard
def get_retry_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞", callback_data="get_task")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
        ]
    )
    return keyboard

async def is_user_subscribed(bot, channel_id: str, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except TelegramBadRequest:
        return False
# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —É –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data == "add_task")
async def add_task_start(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n –ù–û–ú–ï–† –ó–ê–î–ê–ß–ò –í –ö–ò–ú@ –¢–ï–ö–°–¢ –ó–ê–î–ê–ß–ò @–û–¢–í–ï–¢ –ù–ê –ó–ê–î–ê–ß–£")
    await state.set_state(AdminStates.waiting_for_task_text)
    await callback.answer()
@router.message(AdminStates.waiting_for_task_text)
async def add_task_text(message: Message, state: FSMContext):
    await state.update_data(task_text=message.text)
    await message.answer(
        "–ï—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á–∏?",
        reply_markup=yes_no_keyboard("image")
    )
    await state.set_state(AdminStates.waiting_for_image_confirm)
@router.callback_query(AdminStates.waiting_for_image_confirm)
async def confirm_image(callback: CallbackQuery, state: FSMContext):
    if callback.data == "image_yes":
        await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ):")
        await state.set_state(AdminStates.waiting_for_image)
    else:
        await state.update_data(image_name=None)
        await callback.message.answer(
            "–ï—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞—á–∏?",
            reply_markup=yes_no_keyboard("file")
        )
        await state.set_state(AdminStates.waiting_for_file_confirm)
    await callback.answer()
import os

@router.message(AdminStates.waiting_for_image, F.photo | F.document)
async def save_image(message: Message, state: FSMContext):
    if message.photo:
        file = message.photo[-1]
        file_id = file.file_id
        ext = ".jpg"
    elif message.document:
        file = message.document
        file_id = file.file_id
        ext = os.path.splitext(file.file_name)[-1]
    else:
        await message.answer("–≠—Ç–æ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    filename = f"{file_id}{ext}"
    path = os.path.join(IMAGES_DIR, filename)
    # path = f"assets/images/{filename}"
    await bot.download(file, destination=path)

    await state.update_data(image_name=filename)

    await message.answer(
        "–ï—Å—Ç—å –ª–∏ —Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞—á–∏?",
        reply_markup=yes_no_keyboard("file")
    )
    await state.set_state(AdminStates.waiting_for_file_confirm)
@router.callback_query(AdminStates.waiting_for_file_confirm)
async def confirm_file(callback: CallbackQuery, state: FSMContext):
    if callback.data == "file_yes":
        await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª:")
        await state.set_state(AdminStates.waiting_for_file)
    else:
        await state.update_data(file_name=None)
        await save_task_to_db(callback.message, state)
    await callback.answer()
@router.message(AdminStates.waiting_for_file, F.document)
async def save_file(message: Message, state: FSMContext):
    doc = message.document
    filename = doc.file_name
    path = os.path.join(FILES_DIR, filename)
    # path = f"assets/files/{filename}"
    await bot.download(doc, destination=path)

    await state.update_data(file_name=filename)
    await save_task_to_db(message, state)
async def save_task_to_db(message: Message, state: FSMContext):
    data = await state.get_data()
    task_text = data["task_text"]
    image_name = data.get("image_name")
    file_name = data.get("file_name")
    task_text = task_text.split("@")
    async with aiosqlite.connect(db_path) as db:
        await db.execute(
            "INSERT INTO Tasks (num, text, image, file, answer) VALUES (?, ?, ?, ?, ?)",
            (task_text[0],task_text[1], image_name, file_name, task_text[2])
        )
        await db.commit()

    await message.answer(
        "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=back_or_add_more_keyboard()
    )
    await state.clear()
# —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
@router.callback_query(F.data == "delete_task")
async def delete_task_start(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    for i in range(1, 28):
        kb.button(text=f"–ó–∞–¥–∞–Ω–∏–µ {i}", callback_data=f"browse_{i}")
    kb.adjust(3)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:", reply_markup=kb.as_markup())
    await callback.answer()
@router.callback_query(F.data.startswith("browse_"))
async def browse_tasks(callback: CallbackQuery, state: FSMContext):
    num = int(callback.data.split("_")[1])

    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute(
            "SELECT id, text FROM Tasks WHERE num = ? ORDER BY id",
            (num,)
        )
        tasks = await cursor.fetchall()

    if not tasks:
        await callback.message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞.")
        return

    await state.update_data(tasks=tasks, idx=0)
    await state.set_state(AdminStates.browsing_tasks)
    await show_task(callback.message, state)
    await callback.answer()

async def show_task(message: Message, state: FSMContext):
    data = await state.get_data()
    task = data["tasks"][data["idx"]]

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="prev_task"),
                InlineKeyboardButton(text="‚û°Ô∏è", callback_data="next_task")
            ],
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="delete_this_task"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
    )
    await message.answer(f"ID: {task[0]}\n–¢–µ–∫—Å—Ç: {task[1]}", reply_markup=kb)
@router.callback_query(AdminStates.browsing_tasks, F.data == "prev_task")
async def prev_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = max(0, data["idx"] - 1)
    await state.update_data(idx=idx)
    await show_task(callback.message, state)
    await callback.answer()

@router.callback_query(AdminStates.browsing_tasks, F.data == "next_task")
async def next_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    idx = min(len(data["tasks"]) - 1, data["idx"] + 1)
    await state.update_data(idx=idx)
    await show_task(callback.message, state)
    await callback.answer()

@router.callback_query(AdminStates.browsing_tasks, F.data == "delete_this_task")
async def delete_this_task(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    task = data["tasks"][data["idx"]]
    task_id = task[0]

    async with aiosqlite.connect(db_path) as db:
        await db.execute("DELETE FROM Tasks WHERE id = ?", (task_id,))
        await db.commit()

    await callback.message.answer(f"–ó–∞–¥–∞—á–∞ ID {task_id} —É–¥–∞–ª–µ–Ω–∞.", reply_markup=get_admin_keyboard())
    await state.clear()
    await callback.answer()
@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=get_admin_keyboard()
    )
    await callback.answer()

# –ü–æ–∫–∞–∑–∞—Ç—å 27 –∑–∞–¥–∞–Ω–∏–π
@router.callback_query(F.data == "select_task")
async def select_task(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    for i in range(1, 28):
        kb.button(text=f"–ó–∞–¥–∞–Ω–∏–µ {i}", callback_data=f"task_{i}")
    kb.adjust(3)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=kb.as_markup())
    await callback.answer()
# --- –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç ---
@router.callback_query(F.data.startswith("task_"))
async def start_task(callback: CallbackQuery, state: FSMContext):
    num = int(callback.data.split("_")[1])
    user_id = callback.from_user.id

    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute(
            "SELECT id, text, answer,  image, file FROM Tasks WHERE num = ? ORDER BY RANDOM() LIMIT 10",
            (num,)
        )
        questions = await cursor.fetchall()

    if not questions:
        await callback.message.answer("–î–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",reply_markup=get_back_keyboard())
        await callback.answer()
        return

    await state.update_data(
        mode="task",
        num=num,
        questions=questions,
        current=0,
        answers=[]
    )
    await state.set_state(TestStates.testing)
    await send_next_question(callback.message, state)
    await callback.answer()


@router.callback_query(F.data == "train_variant")
async def start_train_variant(callback: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("""
            SELECT id, text, answer, num, image, file 
            FROM Tasks 
            WHERE num BETWEEN 1 AND 27
            GROUP BY num
        """)
        questions = await cursor.fetchall()

    if not questions:
        await callback.message.answer("–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞.")
        return

    await state.update_data(
        mode="train_variant",
        questions=questions,
        current=0,
        answers=[]
    )
    await state.set_state(TestStates.testing)
    await send_next_question(callback.message, state)
    await callback.answer()
# --- –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å ---
async def send_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    current = data["current"]
    questions = data["questions"]

    if current >= len(questions):
        print(state)
        await show_results(message, state)
        return

    q = questions[current]
    if data["mode"] == "train_variant":
        num = q[3]
        text = f"–ó–∞–¥–∞–Ω–∏–µ {num}:\n{q[1]}"
    else:
        text = f"–í–æ–ø—Ä–æ—Å {current + 1}:\n{q[1]}"
    await message.answer(text,reply_markup=get_back_keyboard())
    if q[3]:
        print(f"assets/images/{q[3]}")
        photo = FSInputFile(f"{IMAGES_DIR}/{q[3]}")
        await message.answer_photo(photo)
    if q[4]:
        print(f"assets/files/{q[4]}")
        file = FSInputFile(f"{FILES_DIR}/{q[4]}")
        await message.answer_document(file)

@router.message(TestStates.testing)
async def handle_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    answers = data["answers"]
    answers.append(message.text.strip())
    await state.update_data(answers=answers, current=data["current"] + 1)

    await send_next_question(message, state)
# --- –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
async def show_results(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data["questions"]
    answers = data["answers"]
    points_table = {0:0, 1: 7, 2: 14, 3: 20, 4: 27, 5: 34, 6: 40, 7: 43, 8: 46, 9: 48, 10: 51, 11: 54, 12: 56, 13: 59, 14: 62, 15: 64, 16: 67, 17: 70, 18: 72, 19: 75, 20: 78, 21: 80, 22: 83, 23: 85, 24: 88, 25: 90, 26: 93, 27: 95, 28: 98, 29: 100}
    table = "–í–∞—à –æ—Ç–≤–µ—Ç | –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç\n"
    correct = 0

    for idx, q in enumerate(questions):
        user_ans = answers[idx]
        true_ans = q[2]
        table += f"{user_ans} | {true_ans}\n"
        if user_ans.lower() == true_ans.lower():
            correct += 1
            print(idx)
    points = points_table[correct]

    await message.answer(f"{table}\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {correct} –∏–∑ {len(questions)} –±–∞–ª–ª–æ–≤:{points}",reply_markup=get_back_keyboard())

    async with aiosqlite.connect(db_path) as db:
        date = datetime.now().strftime("%Y-%m-%d %H:%M")
        if data["mode"] == "train_variant":
            row = f"{date} –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç: {correct} –∏–∑ {len(questions)} –±–∞–ª–ª–æ–≤: {points}"
        else:
            row = f"{date} –ó–∞–¥–∞–Ω–∏–µ {data['num']}: {correct} –∏–∑ {len(questions)}"

        await db.execute(
            "INSERT INTO Users (user_id, user_results) VALUES (?, ?) "
            "ON CONFLICT(user_id) DO UPDATE SET user_results = user_results || '\n' || ?",
            (message.from_user.id, row, row)
        )
        await db.commit()

    await state.clear()


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–Ω–æ–ø–∫—É:",
        reply_markup=get_keyboard()
    )
@dp.message(F.from_user.id == ADMIN_ID, F.text.startswith("/admin"))
async def cmd_admin(message: types.Message):
    # print(F.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞",
        reply_markup=get_admin_keyboard()
    )
@dp.callback_query(lambda c: c.data == "gift")
async def signup(callback: types.CallbackQuery, bot):
    user = callback.from_user
    CHANNEL_ID = -1002027633415
    if await is_user_subscribed(bot, CHANNEL_ID, user.id):
        msg = "üéÅ –î–µ—Ä–∂–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫"
        await callback.message.answer(msg)
        await callback.message.answer_document(
            types.FSInputFile("–ü—Ä–æ–≥–Ω–æ–∑–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç 2025.pdf"), reply_markup=get_back_keyboard()
        )
        await callback.answer()
    else:
        msg = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.\nhttp://t.me/ege_infa_astpva"

        await callback.message.answer(msg, reply_markup=get_back_keyboard())
        await callback.answer()
    # await callback_query.message.answer(reply_markup=get_back_keyboard())

@dp.callback_query(lambda c: c.data == "results")
async def signup(callback: types.CallbackQuery, bot):
    # print(callback.from_user.id)
    async with aiosqlite.connect(db_path) as db:
        cursor = await db.execute("""
            SELECT user_id, user_results 
            FROM USERS 
            WHERE user_id = ?
        """, (callback.from_user.id,) )

        results = await cursor.fetchall()
        if results:
            results = results[0][1]
        else:
            results = "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç—ã"

    await callback.message.answer(results, reply_markup=get_back_keyboard())
    await callback.answer()

def escape_md(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã MarkdownV2
    escape_chars = r"_*[]()~`>#+-={}.!"
    return ''.join(['\\' + c if c in escape_chars else c for c in text])

@dp.callback_query(lambda c: c.data == "get_task")
async def process_callback(callback: types.CallbackQuery):
    await callback.message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∑–∞–¥–∞—á—É...")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—ÅGPT
    prompt = "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ python –∏ –¥–∞–π —Å—Ä–∞–∑—É –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ—ë."
    try:
        response = await get_gpt_response(prompt)
        response = escape_md(response)
        # print(response)
        await callback.message.answer(response, reply_markup=get_retry_keyboard(), parse_mode="MarkdownV2")
        await callback.answer()
    except:
        await callback.message.answer("–ö–∞–∫–∞—è\\-—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", reply_markup=get_retry_keyboard(), parse_mode="MarkdownV2")
        await callback.answer()
async def get_gpt_response(prompt):
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"

    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    json_data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt/latest",
        "completionOptions": {
            "stream": False,
            "temperature": 0.7,
            "maxTokens": 200
        },
        "messages": [
            {"role": "system", "text": "–¢—ã ‚Äî –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–∞–¥–∞—á."},
            {"role": "user", "text": prompt}
        ]
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=json_data) as resp:
                result = await resp.json()
                answer = result["result"]["alternatives"][0]["message"]["text"].split("–û—Ç–≤–µ—Ç")[1]
                return result["result"]["alternatives"][0]["message"]["text"].split("–û—Ç–≤–µ—Ç")[0] + f"|| **–û—Ç–≤–µ—Ç {answer} ||"
    except:
        return "–ö–∞–∫–∞—è\\-\\—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
@dp.callback_query(lambda c: c.data == "go_back")
async def go_back(callback_query: types.CallbackQuery):
    await callback_query.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –Ω–∞–∑–∞–¥...")
    await callback_query.message.answer(
        "–ú–µ–Ω—é:",
        reply_markup=get_keyboard()
    )



async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    dp.include_router(router)
    asyncio.run(main())
